name: libpinmame
on:
  push:

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - id: version
        run: |
          VERSION=$(grep -Eo "[0-9\.]+" src/version.c | head -1)
          echo "::set-output name=version::${VERSION}"

  build:
    name: Build libpinmame-${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    needs: [ version ]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: win-x64
            platform-name: x64
            lib: libpinmame-${{ needs.version.outputs.version }}.dll
          - os: windows-latest
            platform: win-x86
            platform-name: Win32
            lib: libpinmame-${{ needs.version.outputs.version }}.dll
          - os: windows-latest
            platform: win-arm64
            platform-name: ARM64
            lib: libpinmame-${{ needs.version.outputs.version }}.dll
          - os: macos-latest
            platform: osx-x64
            lib: libpinmame.${{ needs.version.outputs.version }}.dylib
          - os: ubuntu-latest
            platform: linux-x64
            lib: libpinmame.so.${{ needs.version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            curl -sL -H "Authorization: Token ${{ secrets.GH_PAT }}" https://api.github.com/repos/upx/upx/actions/artifacts/46946159/zip -o upx.zip
            7z x upx.zip -oupx
            rm upx.zip
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            curl -sL -H "Authorization: Token ${{ secrets.GH_PAT }}" https://api.github.com/repos/upx/upx/actions/artifacts/46946156/zip -o upx.zip
            7z x upx.zip -oupx
            chmod 755 upx/upx
            rm upx.zip
          fi
        shell: bash
      - name: Build libpinmame-${{ matrix.platform }}
        run: |
          cp cmake/libpinmame/CMakeLists_${{ matrix.platform }}.txt CMakeLists.txt
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cmake -G "Visual Studio 16 2019" -A ${{ matrix.platform-name }} -B build
            cmake --build build --config Release
            if [[ "${{ matrix.platform }}" != "win-arm64" ]]; then 
              ./upx/upx.exe build/Release/${{ matrix.lib }}
            fi
          else
            cmake -DCMAKE_BUILD_TYPE=Release -B build/Release
            cmake --build build/Release
            if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
              ./upx/upx build/Release/${{ matrix.lib }}
            fi
          fi
        shell: bash
      - run: |
          mkdir tmp
          cp build/Release/${{ matrix.lib }} tmp
          cp release/license.txt tmp
        shell: bash
      - uses: actions/upload-artifact@v2
        with:
          name: libpinmame-${{ matrix.platform }}
          path: build/Release/${{ matrix.lib }}
          
  dispatch:
    runs-on: ubuntu-latest
    needs: [ build ]
    if: github.repository == 'vpinball/pinmame' && github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.GH_PAT }}
          repository: VisualPinball/pinmame-dotnet
          event-type: update-libpinmame
          client-payload: '{"run_id": "${{ github.run_id }}"}'
